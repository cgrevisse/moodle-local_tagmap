{"version":3,"file":"tagcloud.min.js","sources":["../src/tagcloud.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module for the TagMap cloud.\n * Based on https://d3-graph-gallery.com/graph/wordcloud_size.html\n *\n * @module     local_tagmap/tagcloud\n * @copyright  2025 Christian Gr√©visse <christian.grevisse@uni.lu>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as d3 from '../js/d3.v7.min.js';\nimport cloud from '../js/d3.layout.cloud.js';\nimport Modal from 'core/modal';\nimport Templates from 'core/templates';\nimport {hexToRgb, interpolateColor, sortTags} from './utils';\n\n/**\n * Loads the data for the tag cloud.\n * @async\n * @param {number} courseID The ID of the course for which to load the tag cloud data.\n * @returns {Promise<Object|null>} A promise that resolves to the graph data or null if an error occurs.\n */\nasync function loadData(courseID) {\n    const request = {\n        methodname: 'local_tagmap_get_graphdata',\n        args: {\n            courseid: courseID,\n        }\n    };\n\n    try {\n        const responseObj = await Ajax.call([request])[0];\n        if (responseObj.error) {\n            window.console.log(responseObj.error.exception.message);\n            return null;\n        } else {\n            return responseObj;\n        }\n    } catch (error) {\n        window.console.log(error.message);\n        return null;\n    }\n}\n\n/**\n * Takes the data from the server and adds further insights.\n *\n * @param {Object} data The data object containing resources and questions.\n */\nfunction transformData(data) {\n    let tags = {};\n\n    data.resources.forEach(resource => {\n        resource.tags.forEach(tag => {\n            if (!tags[tag]) {\n                tags[tag] = {resources: [], questions: []};\n            }\n            tags[tag].resources.push(resource);\n        });\n    });\n\n    data.questions.forEach(question => {\n        question.tags.forEach(tag => {\n            if (!tags[tag]) {\n                tags[tag] = {resources: [], questions: []};\n            }\n            tags[tag].questions.push(question);\n        });\n    });\n\n    data.tags = tags;\n\n    data.maxQuestionsPerTag = Math.max(...Object.values(data.tags).map(v => (v.questions.length)));\n    data.maxResourcesPerTag = Math.max(...Object.values(data.tags).map(v => (v.resources.length)));\n\n    data.resources.forEach(resource => {\n        resource.tags = resource.tags.map(tag => ({'name': tag, 'used': data.tags[tag].questions.length > 0})).sort(sortTags);\n        const usedTags = resource.tags.map(tag => tag.used ? 1 : 0).reduce((a, b) => a + b, 0);\n        resource.tagUsage = Math.round(usedTags / resource.tags.length * 100);\n    });\n\n    data.questions.forEach(question => {\n        question.tags = question.tags.map(tag => ({'name': tag, 'covered': data.tags[tag].resources.length > 0})).sort(sortTags);\n        const coveredTags = question.tags.map(tag => tag.covered ? 1 : 0).reduce((a, b) => a + b, 0);\n        question.tagCoverage = Math.round(coveredTags / question.tags.length * 100);\n    });\n}\n\nclass TagCloud {\n    constructor(courseID, data, container, resourceCentric) {\n        this.courseID = courseID;\n        this.data = data;\n        this.container = container;\n        this.resourceCentric = resourceCentric;\n        this.initGraph();\n    }\n\n    initGraph() {\n        const graph = d3.select(this.container);\n\n        // Set the dimensions and margins of the graph\n        const margin = {top: 10, right: 10, bottom: 10, left: 10};\n        const rect = graph.node().getBoundingClientRect();\n        const width = rect.width - margin.left - margin.right;\n        const height = rect.height - margin.top - margin.bottom;\n\n        // Append the svg object to the body of the page\n        this.svg = graph.append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // Constructs a new cloud layout instance. It run an algorithm to find the position of words that suits your requirements\n        // Wordcloud features that are different from one word to the other must be here\n        this.layout = cloud()\n            .size([width, height])\n            .words(Object.entries(this.data.tags)\n                .map(([tag, value]) => ({text: tag, size: this.resourceCentric ? value.resources.length : value.questions.length}))\n            )\n            .padding(5) // Space between words\n            .rotate(0)\n            .fontSize(d => d.size * 10) // Font size of words\n            .on(\"end\", this.draw.bind(this));\n        this.layout.start();\n    }\n\n    // This function takes the output of 'layout' above and draw the words\n    // Wordcloud features that are THE SAME from one word to the other can be here\n    draw(words) {\n        this.svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.layout.size()[0] / 2 + \",\" + this.layout.size()[1] / 2 + \")\")\n            .selectAll(\"text\")\n            .data(words)\n            .enter().append(\"text\")\n            .style(\"font-size\", d => d.size)\n            .style(\"fill\", this.color.bind(this))\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-family\", \"Arial\")\n            .attr(\"transform\", d => \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\")\n            .text(d => d.text)\n            .on(\"click\", this.handleClick.bind(this))\n            .on(\"mouseover\", function() {\n                d3.select(this)\n                    .transition()\n                    .duration(150)\n                    .style(\"fill\", \"orange\");\n            })\n            .on(\"mouseout\", (event) => {\n                // Reset color to the original color based on the color function\n                d3.select(event.currentTarget)\n                    .transition()\n                    .duration(150)\n                    .style(\"fill\", d => this.color(d));\n            });\n    }\n\n    async handleClick(event, d) {\n        const tag = d.text;\n        await showTagModal(tag, this.data);\n    }\n\n    color(d) {\n        const tag = d.text;\n\n        if (this.resourceCentric) {\n            // The more a tag is covered by resources, the greener it is; the less it is covered, the greyer it is\n            const ratio = this.data.tags[tag].questions.length / this.data.maxQuestionsPerTag;\n            const lowerColor = hexToRgb(\"#777777\"); // Grey\n            const higherColor = hexToRgb(\"#00ff00\"); // Green\n            return interpolateColor(ratio, lowerColor, higherColor);\n        } else {\n            // If the tag is covered by at least one resource, it is green; otherwise, it is red\n            return this.data.tags[tag].resources.length > 0 ? \"#2ca02c\" : \"#d62728\";\n        }\n    }\n}\n\n/**\n * Shows a modal with the tag details.\n *\n * @param {string} tag The tag.\n * @param {Object} data The data.\n */\nasync function showTagModal(tag, data) {\n    const resources = data.tags[tag].resources;\n    const questions = data.tags[tag].questions;\n\n    await Modal.create({\n        title: tag,\n        body: Templates.render('local_tagmap/tagmodal', {\n            tag: tag,\n            resources: resources,\n            questions: questions,\n            numResources: resources.length,\n            numQuestions: questions.length\n        }),\n        show: true,\n        removeOnClose: true,\n    });\n}\n\n/**\n * Show the resource usage.\n *\n * @param {Object} data The data object containing resource usage information.\n */\nasync function showResourceUsage(data) {\n    try {\n        const html = await Templates.render('local_tagmap/resourceusage', {resources: data.resources});\n        document.getElementById('resourceUsage').innerHTML = html;\n        return true;\n    } catch (error) {\n        document.getElementById('resourceUsage').innerHTML = error.message;\n        return false;\n    }\n}\n\n/**\n * Show the question coverage.\n *\n * @param {Object} data The data object containing question coverage information.\n */\nasync function showQuestionCoverage(data) {\n    try {\n        const html = await Templates.render('local_tagmap/questioncoverage', {questions: data.questions});\n        document.getElementById('questionCoverage').innerHTML = html;\n        return true;\n    } catch (error) {\n        document.getElementById('questionCoverage').innerHTML = error.message;\n        return false;\n    }\n}\n\n/**\n * Adds click listeners to badge tags.\n *\n * @param {Object} data The data object containing tags and their associated resources and questions.\n */\nfunction addBadgeTagClickListeners(data) {\n    // Remove previous listeners to avoid duplicates\n    document.querySelectorAll('.badge-tag').forEach(badge => {\n        badge.addEventListener('click', (e) => {\n            const tag = e.currentTarget.innerHTML;\n            showTagModal(tag, data);\n        });\n    });\n}\n\nexport const init = async(courseID, resourceTagCloudContainer, questionTagCloudContainer) => {\n    const data = await loadData(courseID);\n    transformData(data);\n    new TagCloud(courseID, data, resourceTagCloudContainer, true);\n    new TagCloud(courseID, data, questionTagCloudContainer, false);\n    await showResourceUsage(data);\n    await showQuestionCoverage(data);\n    addBadgeTagClickListeners(data);\n};\n"],"names":["TagCloud","constructor","courseID","data","container","resourceCentric","initGraph","graph","d3","select","this","margin","rect","node","getBoundingClientRect","width","height","svg","append","attr","layout","size","words","Object","entries","tags","map","_ref","tag","value","text","resources","length","questions","padding","rotate","fontSize","d","on","draw","bind","start","selectAll","enter","style","color","x","y","handleClick","transition","duration","event","currentTarget","showTagModal","ratio","maxQuestionsPerTag","lowerColor","higherColor","Modal","create","title","body","Templates","render","numResources","numQuestions","show","removeOnClose","async","resourceTagCloudContainer","questionTagCloudContainer","request","methodname","args","courseid","responseObj","Ajax","call","error","window","console","log","exception","message","loadData","forEach","resource","push","question","Math","max","values","v","maxResourcesPerTag","sort","sortTags","usedTags","used","reduce","a","b","tagUsage","round","coveredTags","covered","tagCoverage","transformData","html","document","getElementById","innerHTML","showResourceUsage","showQuestionCoverage","querySelectorAll","badge","addEventListener","e","addBadgeTagClickListeners"],"mappings":"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"}